{"cells":[{"metadata":{"_uuid":"92210e4f-65c5-413a-b04f-36f0de65b99d","_cell_guid":"349ba788-86a3-4edd-87d6-4c9c48f3864d","trusted":true,"_kg_hide-input":true,"_kg_hide-output":true},"cell_type":"code","source":"## ---- config----|\n\nstart  <- Sys.time()\n\nset.seed(123456)\noptions(repr.plot.width = 20, repr.plot.height = 12)\noptions(encoding = 'UTF-8')\n\nlist.of.packages <- c(\"ggwordcloud\")\nnew.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,\"Package\"])]\nif(length(new.packages)) install.packages(new.packages)\n\nend  <- Sys.time()\nmem  <- pryr::mem_used()\n\nWriteLog <- function(TaskName, StartTime, EndTime, AdditionalInfo) {\n\n  TotalTime <- difftime(EndTime, StartTime, tz, \n                        units = c(\"auto\", \"secs\", \"mins\", \"hours\",\n                                  \"days\", \"weeks\"))\n  \n  log  <- paste('[', Sys.time(), '] ',\n                'Task: ', TaskName, ' | ', \n                'Time elapsed: ', format(round(TotalTime, 3), format = '%H:%M:%S'), ' | ',\n                'Memory used: ', round(pryr::mem_used() / 1000 / 1000, 0), ' MB | ',\n                'Top Memory used: ', round(AdditionalInfo / 1000 / 1000, 0), ' MB | ',\n                sep = \"\")\n\n  write(log, file = \"log.txt\", append = TRUE)\n  #print(log)\n}\n\nWriteLog('config', start, end, mem)\n\n## ---- end-of-config----|\n","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"f37d26cd-c1e0-4ab6-87ee-1e3768529a0f","_cell_guid":"2f449d51-310c-4994-a4fe-47d34412adf8","trusted":true},"cell_type":"markdown","source":"# Trabalho em Grupo\n(até 4 integrantes)\n\n- **Curso:** FGV MBA - Business Analytics and Big Data\n- **Disciplina:** Análise de Mídias Sociais e Mineração de Texto\n- **Professor:** Gustavo Mirapalheta\n\n## Alunos\n|Github|Nome|Matricula|E-mail|\n|---|---|---|---|\n|<a href=\"https://github.com/DanielFCampos\"><img src=\"https://avatars2.githubusercontent.com/u/31582602?s=460&v=4\" title=\"DanielFCampos\" width=\"40\" height=\"40\"></a>|Daniel Campos|A57635769|[daniel.ferraz.campos@gmail.com](daniel.ferraz.campos@gmail.com)|\n|<a href=\"https://github.com/ldaniel\"><img src=\"https://avatars2.githubusercontent.com/u/205534?s=460&v=4\" title=\"ldaniel\" width=\"40\" height=\"40\"></a>|Leandro Daniel|A57622988|[contato@leandrodaniel.com](contato@leandrodaniel.com)|\n|<a href=\"https://github.com/RodriGonca\"><img src=\"https://avatars2.githubusercontent.com/u/50252438?s=460&v=4\" title=\"RodriGonca\" width=\"40\" height=\"40\"></a>|Rodrigo Goncalves|A57566093|[rodrigo.goncalves@me.com](rodrigo.goncalves@me.com)|\n|<a href=\"https://github.com/ygorlima1\"><img src=\"https://avatars2.githubusercontent.com/u/52429828?s=460&v=4\" title=\"ygorlima1\" width=\"40\" height=\"40\"></a>|Ygor Lima|A57549661|[ygor_redesocial@hotmail.com](ygor_redesocial@hotmail.com)|"},{"metadata":{"_uuid":"3dbca80a-6639-47b8-9a12-c18c3e9623fa","_cell_guid":"b575c724-7a29-474d-81b3-6d81f5ebea6d","trusted":true},"cell_type":"markdown","source":"# Enunciado"},{"metadata":{},"cell_type":"markdown","source":"Apresente uma análise exploratória de dados utilizando as técnicas de Text Mining desenvolvidas na disciplina Análise de Mídias Sociais e Mineração de Texto.\n\nPara esta tarefa iremos utilizar um dataset extraído do Kaggle. Nele, encontram-se disponíveis cerca de 380 mil letras de músicas de uma grande variedade de artistas e gêneros."},{"metadata":{"_uuid":"75974f35-f460-48c8-abfd-5627e6b00cea","_cell_guid":"6fa2fb61-915d-43fe-b995-c273a96a6cfd","trusted":true},"cell_type":"markdown","source":"# Libraries"},{"metadata":{"_uuid":"561fdb15-026e-4a68-b40d-a07bde51b83a","_cell_guid":"f36a8cd7-95b2-4c78-b3d4-fb2f83ac496e","trusted":true},"cell_type":"markdown","source":"Aqui estão todas as bibliotecas necessárias para este exercício."},{"metadata":{"_uuid":"8001a2a3-feb6-4766-962a-020a9c86bfb1","_cell_guid":"faf13057-8d5f-4f0a-91be-550934c34c12","trusted":true,"_kg_hide-input":false,"_kg_hide-output":true},"cell_type":"code","source":"## ---- load_libraries----|\n\nstart = Sys.time()\n\n#data_wrangling\n\nlibrary(dplyr, warn.conflicts = FALSE)\nlibrary(tidyr, warn.conflicts = FALSE)\nlibrary(readr)\nlibrary(stringr)\nlibrary(tidytext)\nlibrary(ggplot2)\nlibrary(forcats)\n\n#wordcloud\n\nlibrary(ggwordcloud)\n\n#network_visuallization\n\nlibrary(visNetwork)\nlibrary(IRdisplay)\nlibrary(igraph, warn.conflicts = FALSE)\n\n#topic_modeling\n\nlibrary(topicmodels)\n\nend = Sys.time()\nmem = pryr::mem_used()\n\nWriteLog('load library', start, end, mem)\n\n## ---- end-of-load_libraries----|\n","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"24e0829c-0fc2-4c52-b5a4-428105d87ffd","_cell_guid":"5a467a6f-b42e-4231-bcfa-ddafb7bdc147","trusted":true},"cell_type":"markdown","source":"# Importar e efetuar a limpeza dos dados"},{"metadata":{"_uuid":"08aa18af-cd8c-4adb-9365-d2438d15de4f","_cell_guid":"cceff8f2-fb96-4542-89be-2ceee24f5796","trusted":true,"_execution_state":"idle","_kg_hide-input":false,"_kg_hide-output":false},"cell_type":"code","source":"## ---- data_ingestion----|\n\nstart = Sys.time()\n\nlyrics <- read_csv('../input/380000-lyrics-from-metrolyrics/lyrics.csv',\n                   col_types = cols(\n                       index = col_integer(),\n                       song = col_character(),\n                       year = col_integer(),\n                       artist = col_factor(),\n                       genre = col_factor(),\n                       lyrics = col_character()),\n                   locale = locale(encoding = 'UTF-8'))\n\nprint(paste('Número de observações: ', length(lyrics$index)))\n\nend   = Sys.time()\nmem   = pryr::mem_used()\n\nWriteLog('import lyrics', start, end, mem)\n\n## ---- end-of-data_ingestion----|\n","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"0ec45d41-8b52-4d0a-b742-319111bf5d64","_cell_guid":"946bda93-80ab-4889-91f6-c82a827f5f02","trusted":true},"cell_type":"markdown","source":"Após uma primeira exploração dos dados, notamos a neccessidade de retirar todas as inconsistências e aplicar os seguintes filtros no dataset:\n\n* Valores faltantes;\n* Gêneros não definidos;\n* Ano anterior a 1970 (poucas observações)."},{"metadata":{"_uuid":"3563bb61-ed9c-4fad-a33b-3b9c550155c6","_cell_guid":"095b39fa-05e2-469a-85b5-dd746c2b50d0","trusted":true,"_kg_hide-input":false,"_kg_hide-output":false},"cell_type":"code","source":"## ---- data_filter----|\n\nstart = Sys.time()\n\nlyrics <- filter(lyrics, \n                 !is.na(lyrics), \n                 !(genre %in% c('Not Available', 'Other')),\n                 as.integer(year) >= 1970)\n\n# uncomment for fast prototyping\n# lyrics  <- sample_n(lyrics, size = 1000)\n# invisible(gc())\n\nprint(paste('Número de observações: ', length(lyrics$index)))\n\nend = Sys.time()\nmem = pryr::mem_used()\n\nWriteLog('filter missing values', start, end, mem)\n\n## ---- en-of-data_filter----|\n","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"c82ccc13-14cc-4f34-8ca5-de8f8f15ac26","_cell_guid":"07a65c23-8235-4cb3-a464-024ce3d1d549","trusted":true},"cell_type":"markdown","source":"Vamos também incluir a identificação da década de lançamento da música para enriquescer os dados disponíveis."},{"metadata":{"_uuid":"e85ff95e-5510-4aba-89bf-cb1d0b6e4502","_cell_guid":"57a5c90f-ef72-41fb-a550-22a1a47e9b63","trusted":true,"_kg_hide-input":true,"_kg_hide-output":true},"cell_type":"code","source":"## ---- data_enhance----|\n\nstart  <- Sys.time()\n\nlyrics$decade <- paste(str_sub(lyrics$year, 1, 3), '0', sep = '')\nlyrics$genre  <- trimws(lyrics$genre)\n\nsaveRDS(lyrics, 'lyrics.rds')\n\nend  <- Sys.time()\nmem = pryr::mem_used()\n\nWriteLog('data enhance', start, end, mem)\n\n## ---- end-of-data_enhance----|\n","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"b282b9cf-3ed4-42b2-910c-2cb13b8d82ef","_cell_guid":"4f3f1ee5-8bac-4a5a-9fb1-3e856520fba6","trusted":true},"cell_type":"markdown","source":"Podemos visualizar uma amostra do dataset que iremos trabalhar."},{"metadata":{"_uuid":"6de4b7c7-3f69-40ce-987a-5bdbe81acf39","_cell_guid":"ee8ed16e-d120-4b35-bb36-49a5df20b924","trusted":true,"_kg_hide-input":true},"cell_type":"code","source":"## ---- view_sample----|\n\nstart = Sys.time()\n\nsample_n(lyrics, 25) %>% \n    mutate(lyrics_preview = str_sub(lyrics, 1, 140)) %>% \n    select(-lyrics)\n\nend = Sys.time()\nmem = pryr::mem_used()\n\nWriteLog('view sample', start, end, mem)\n\n## ---- end-of-view_sample----|\n","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"2482cd17-f243-428c-847a-6c04aca52dc5","_cell_guid":"2a6e466a-7dac-4a43-8ae1-4c728f8a6daa","trusted":true},"cell_type":"markdown","source":"# Análise Exploratória dos Dados Inicial"},{"metadata":{},"cell_type":"markdown","source":"Ficamos com cerca de 237 mil letras de músicas que utilizaremos para analisar diversos aspectos utilizando técnicas de mineração de texto e análise de rede tais como:\n\n* Identificar as palavras e bigramas que são mais utilizadas por gênero musical.\n* Apresentar os bigramas mais utilizados por gênero e artista.\n* Segregação das palavras mais utilizadas por sentimento.\n* Aplicar a técnica de TF-IDF para emilinação de stop words.\n* Aplicar a técnica de topic modeling para segmentação das canções.\n\nAbaixo uma pequena exploração do dataset selecionado."},{"metadata":{"_uuid":"a5e1796c-138b-42fb-9f00-c651d7a5c7ca","_cell_guid":"60e3f83c-93e6-467f-968d-c22b64a9ea6b","trusted":true},"cell_type":"markdown","source":"* Quantidade de músicas e artistas por gênero musical."},{"metadata":{"_uuid":"82d9dee2-5a5d-4b7e-87cc-6f1a6b72dc03","_cell_guid":"2b22114c-40d1-4e30-93d5-7702d46c9b06","trusted":true,"_kg_hide-input":true},"cell_type":"code","source":"## ---- number_of_observations_per_genre----|\n\nstart = Sys.time()\n\ntemp <- group_by(lyrics, genre) %>%\n  summarise(songs = n(),\n            artists = length(unique(artist))) %>% \n  arrange(desc(songs))\n\nggplot(data = temp, aes(x = fct_reorder(genre, songs), y = songs)) +\n    geom_bar(stat = 'identity', aes(fill = genre)) +\n    geom_label(aes(label = paste('songs:', songs, '\\nartists: ', artists, sep = ''),\n                   y = 1000, fill = genre), size = 8, hjust = 'left', alpha = 0.25) +\n    coord_flip() +\n    xlab('Genre') +\n    ylab('') +\n    labs(title = 'Songs and Artists by Genre') +\n    theme(legend.position = 0,\n         text = element_text(size = 20),\n         axis.text.x = element_blank())\n\nend = Sys.time()\nmem = pryr::mem_used()\n\nWriteLog('plot obs per genre', start, end, mem)\n\n## ---- end-of-number_of_observations_per_genre----|\n","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"eeef03d4-9024-42af-96e4-f5ffef1f6be5","_cell_guid":"c68dea2d-ad8f-4398-acff-b68c486d7dfd","trusted":true},"cell_type":"markdown","source":"* Quantidade de músicas e artistas por década."},{"metadata":{"_uuid":"8c92ecfa-aed8-42df-afe1-223606ddae1b","_cell_guid":"ceb701d3-c237-4ac0-b2cd-2e6408312da2","trusted":true,"_kg_hide-input":true},"cell_type":"code","source":"## ---- number_of_observations_per_decade----|\n\nstart = Sys.time()\n\ntemp  <- group_by(lyrics, decade) %>% \n            summarise(songs = n(),\n                      artists = length(unique(artist))) %>% \n            arrange(desc(decade))\n\nggplot(data = temp, aes(x = decade, y = songs)) +\n    geom_bar(stat = 'identity', aes(fill = decade)) +\n    geom_label(aes(label = paste('songs:', songs, '\\nartists: ', artists, sep = ''),\n                   y = 1000, fill = decade), size = 8, hjust = 'left', alpha = 0.25) +\n    coord_flip() +\n    xlab('Decade') +\n    ylab('') +\n    labs(title = 'Songs and Artists by Decade') +\n    theme(legend.position = 0,\n         text = element_text(size = 20),\n         axis.text.x = element_blank())\n\nend = Sys.time()\nmem = pryr::mem_used()\n\nWriteLog('plot obs per decade', start, end, mem)\n\n## ---- end-of-number_of_observations_per_decade----|\n","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"202bf62b-c1f2-4e5e-b28a-3a51c9ccabb4","_cell_guid":"728ac9e5-1bb7-4731-9176-5db9ed392f95","trusted":true},"cell_type":"markdown","source":"* Top 3 artistas, em relação a quantidade de músicas, por gênero."},{"metadata":{"_uuid":"ea16752f-42c0-42f7-a0d2-feeec63ded6d","_cell_guid":"5b50903c-368d-4467-a5f1-5c6c81f57f07","trusted":true,"_kg_hide-input":true},"cell_type":"code","source":"## ---- top_artists----|\n\nstart = Sys.time()\n\ncount(lyrics, genre, artist, sort = TRUE) %>% \n  group_by(genre) %>% \n  arrange(desc(n)) %>% \n  filter(row_number() <= 3) %>% \n  arrange(desc(genre), desc(n))\n\nend = Sys.time()\nmem = pryr::mem_used()\n\nWriteLog('plot top artists', start, end, mem)\n\n## ---- end-of-top_artists----|\n","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"ee44d4c6-e17c-4245-8117-f5f8dbe96f91","_cell_guid":"3ac8d535-7f8a-4e02-867d-875f059b5f9b","trusted":true},"cell_type":"markdown","source":"# Análise Exploratória de Dados"},{"metadata":{"_uuid":"dc1f2d7c-7a32-495a-b7e2-cf5a9a5ece37","_cell_guid":"1eee47c0-5120-4be2-924f-f6b4eaada69e","trusted":true},"cell_type":"markdown","source":"## Análise de palavras mais comuns."},{"metadata":{"_uuid":"436d376f-cf0d-445a-8a36-eb8adddb1ce1","_cell_guid":"f75c06a4-7de2-4dff-bed6-047916743892","trusted":true},"cell_type":"markdown","source":"Vamos utilizar o pacote *`tidytext`* para tokenizar os termos em um dataframe contendo uma palavra por linha."},{"metadata":{"_uuid":"67a88f41-1bcf-48c7-b1c0-ebaec46d347c","_cell_guid":"373d0e3b-5da6-4045-9785-998b7888a542","trusted":true,"_kg_hide-input":false},"cell_type":"code","source":"## ---- get_tokens----|\n\nstart  <- Sys.time()\n\nlyrics_token <- unnest_tokens(lyrics,\n                              input = lyrics,\n                              output = word,\n                              token = 'words',\n                              drop = TRUE,\n                              to_lower = TRUE)\n\nprint(paste('Número de observações: ', length(lyrics_token$index)))\n\nend  <- Sys.time()\nmem = pryr::mem_used()\n\nWriteLog('get tokens', start, end, mem)\n\n## ---- end-of-get_tokens----|\n","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"68262258-a80d-4196-b768-901da6069dee","_cell_guid":"9d9abc38-43ee-4a72-8bb2-ab3006634221","trusted":true,"_kg_hide-input":true,"_kg_hide-output":true},"cell_type":"code","source":"rm(lyrics)\ninvisible(gc())\n","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"0b1a9baf-bd18-4861-a6d2-9842bb0d3fbe","_cell_guid":"a3873647-7f04-4a84-858d-80220522fc8f","trusted":true},"cell_type":"markdown","source":"Algumas músicas, ou mesmo parte da letra, estão em outros idiomas além do inglês. <br>\n\nPara resolver isso vamos aplicar mais dois filtros, onde eliminamos termos que não iniciam com letras `{a- z}`e stop words em outros idiomas de origem latina.\n\nTambém eliminamos palavras com menos de 3 caracteres, uma vez que usualmente estas não representam tópicos ou temas relevantes.\n\nAdicionalmente utilizamos o dicionário de sentimentos `bing` para associar o sentimento a cada palavra do dataset."},{"metadata":{"_uuid":"01583eb6-ebde-40c6-9275-c641603d7a6c","_cell_guid":"2781ea54-5444-4969-a813-cdc84f493aa5","trusted":true,"_kg_hide-input":false},"cell_type":"code","source":"## ---- eliminating_stopwords----|\n\nstart  <- Sys.time()\n\ncustom_stop_words <- c(tm::stopwords(\"german\"), tm::stopwords(\"spanish\"), \n                       tm::stopwords(\"portuguese\"), tm::stopwords(\"french\"),\n                       stop_words$word, 'chorus', 'repeat', 'versus', 'chorus:repeat', \n                       'instrumental')\n\nlyrics_token <- filter(lyrics_token,\n                       str_detect(word, '^[a-z]') &\n                       !(word %in% custom_stop_words) &\n                       nchar(word) >= 3)\n\nbing = get_sentiments('bing')\nlyrics_token$sentiment = plyr::mapvalues(lyrics_token$word, \n                                         bing$word, bing$sentiment, \n                                         warn_missing = FALSE)\n\nlyrics_token$sentiment = if_else(!(lyrics_token$sentiment %in% c('positive', 'negative')), \n                                    'neutral', lyrics_token$sentiment)\n\nprint(paste('Número de observações após a eleminação das stop words: ', \n            length(lyrics_token$index)))\n\nsample_n(lyrics_token, size = 15)\n\ncount_words <- count(lyrics_token, word, sentiment, sort = TRUE)\n\n# saving datasets for later use.\nsaveRDS(lyrics_token, 'lyrics_token.rds')\nsaveRDS(count_words, 'count_words.rds')\n\nmem  <- pryr::mem_used()\nrm(bing, count_words)\ninvisible(gc)\n\nend = Sys.time()\n\nWriteLog('save token lyrics', start, end, mem)\n\n## ---- end-of-eliminating_stopwords----|\n","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"9c8019ad-05fb-4014-af05-43552781a30d","_cell_guid":"cb30ab2c-5d7a-472c-8033-33e7080c81da","trusted":true},"cell_type":"markdown","source":"De posse do dataset organizado, vamos iniciar com a contagem relativa dos termos por gênero musical."},{"metadata":{"_uuid":"150da690-7e9d-427e-aa7f-6a26a0dc6aeb","_cell_guid":"71bc7fe2-cc16-48f1-bba9-ee9e8098e07f","trusted":true,"_kg_hide-input":false},"cell_type":"code","source":"## ---- count_tokens----|\n\nstart  <- Sys.time()\n\ngw <- group_by(lyrics_token, genre, sentiment, word) %>%\n  summarise(gw_c = n()) %>% \n  ungroup() %>% \n  group_by(genre) %>%\n  mutate(gw_p = gw_c / sum(gw_c)) %>% \n  ungroup() %>%\n  arrange(genre, desc(gw_p)) %>% \n  group_by(word) %>% \n  mutate(w_c = sum(gw_c))\n\n# contagem por palavra\nw <- group_by(lyrics_token, sentiment, word) %>%\n  summarise(w_c = n()) %>% \n  ungroup() %>%\n  mutate(w_p = w_c / sum(w_c)) %>%\n  arrange(desc(w_c))\n\nmem  <- pryr::mem_used()\nrm(lyrics_token)\ninvisible(gc)\n\nend = Sys.time()\n\nWriteLog('count tokens', start, end, mem)\n\n## ---- end-of-count_tokens----|\n","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"cb31342f-42cb-486c-a38a-2973210e1de1","_cell_guid":"e9afa243-9043-4d7f-94c4-d365883ea029","trusted":true},"cell_type":"markdown","source":"Vamos iniciar a exploração observando as 100 palavras mais comuns, por sentimento, encontradas no dataset como um todo."},{"metadata":{"_uuid":"f3d3fab5-47ee-4168-b6e2-cf7d74587813","_cell_guid":"09a387c4-70ea-4457-85fd-ffff275f5ee7","trusted":true,"_kg_hide-input":true},"cell_type":"code","source":"## ---- view_wordcloud_token----|\n\nstart  <- Sys.time()\n\ntemp <- group_by(w, sentiment) %>% \n    arrange(desc(w_c)) %>% \n    filter(row_number() < 101) %>% \n    mutate(angle = 90 * sample(c(0, 1), n(), replace = TRUE, prob = c(70, 30)),\n          freq_sd = (w_c - min(w_c)) / (max(w_c) - min(w_c))) %>% \n    ungroup()\n\noptions(repr.plot.width = 20, repr.plot.height = 6)\n\nplt  <- ggplot(data = temp,\n  aes(label = word, \n      size = w_c,\n      color = factor(sentiment), \n      angle = angle)) +\n  geom_text_wordcloud_area(eccentricity = 0.65) +\n  facet_wrap(vars(sentiment), nrow = 1) +\n  scale_size_area(max_size = 35) +\n  theme_minimal() +\n  theme(text = element_text(size = 20))\n\nsuppressWarnings(print(plt))\n\nmem  <- pryr::mem_used()\nrm(w)\ninvisible(gc)\n\nend = Sys.time()\n\nWriteLog('token lyrics wordcloud', start, end, mem)\n\n## ---- end-of-view_wordcloud_token----|\n","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"1b99cd3f-e1cc-4f35-8158-5c1a721858cc","_cell_guid":"951b011b-2da8-4b1a-a7c5-b7429c90555e","trusted":true},"cell_type":"markdown","source":"Também podemos verificar as palavras mais utilizadas por sentimento e gênero musical.\n \nAqui o tamanho de cada termo é dado pela frequência de cada combinaçao de sentimento e gênero musical, de forma que quanto maior a nuvem de palavra maior a diversidade de palavras utilizadas para o a combinação de sentimento e gênero musical.\n\nPodemos observar quem em geral os temas positivos estão concentrados na palavra *\"love\"*, para as palavras neutras a predominância da palavra *\"time\"*, já os temas negativos são muito mais diversos entre os gêneros musicais.\n"},{"metadata":{"_uuid":"64301839-27c8-4670-a230-e4c1491fd58d","_cell_guid":"c5faf2b4-c912-47fe-bee3-173a47d75590","trusted":true,"_kg_hide-input":true},"cell_type":"code","source":"## ---- wordcloud_per_genre_token----|\n\nstart <- Sys.time()\n\ntemp <- group_by(gw, genre, sentiment) %>%  \n    arrange(desc(gw_p)) %>% \n    filter(row_number() < 51) %>%\n    mutate(angle = 90 * sample(c(0, 1), n(), replace = TRUE, prob = c(70, 30)), \n           freq_sd = (gw_c - min(gw_c)) / (max(gw_c) - min(gw_c))) %>% \n    ungroup()\n\noptions(repr.plot.width = 20, repr.plot.height = 48)\n\nplt <- ggplot(data = temp,\n  aes(label = word, \n      size = freq_sd,\n      color = factor(sample.int(20, nrow(temp), replace = TRUE)), \n      angle = angle)) +\n  geom_text_wordcloud_area() +\n  scale_size_area(max_size = 25) +\n  facet_wrap(genre ~ sentiment, nrow = 10) +\n  theme(text = element_text(size = 15))\n\nsuppressWarnings(print(plt))\n\nend = Sys.time()\nmem = pryr::mem_used()\n\nWriteLog('token lyrics wordcloud per genre', start, end, mem)\n\n## ---- end-of-wordcloud_per_genre_token----|\n","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"b3ae62e0-49ac-453d-9c4e-ecca4c87a97b","_cell_guid":"5b427b1f-b6c5-4290-bd8c-2fc58ec23473","trusted":true},"cell_type":"markdown","source":"Na sequência vamos verificar se as 10 palavras mais comuns são uniformes entre os gêneros musicais presentes no dataset."},{"metadata":{"_uuid":"25b3a117-65b3-4584-92c6-e4cd2b38282f","_cell_guid":"c5126caf-6c9d-45ec-aa87-fa60a4784504","trusted":true,"_kg_hide-input":true},"cell_type":"code","source":"## ---- top_10_words_token----|\n\nstart = Sys.time()\n\noptions(repr.plot.width = 20, repr.plot.height = 12)\n\ngw %>%\n  group_by(genre) %>% \n  arrange(desc(gw_p)) %>% \n  filter(row_number() <= 10) %>%\n  mutate(rank = row_number()) %>% \n  ggplot() +\n  geom_bar(stat = 'identity',\n           aes(y = gw_p, x = fct_reorder(word, w_c), fill = genre)) +\n  geom_text(aes(label = as.character(rank), x = fct_reorder(word, w_c), y = 0.002)) +\n  facet_wrap(vars(genre), nrow = 1) +\n  coord_flip() +\n  xlab('Word') +\n  ylab('Relative frequency') +\n  labs(title = 'Top 10 words by music genre') +\n  theme(legend.position = 0,\n        axis.text.x = element_blank(),\n        axis.ticks.x = element_blank(),\n        text = element_text(size = 20))\n\nrm(gw)\ninvisible(gc)\n\nend = Sys.time()\nmem = pryr::mem_used()\n\nWriteLog('plot top words', start, end, mem)\n\n## ---- end-of-top_10_words_token----|\n","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"afc4d2c2-1707-4706-a8e1-68b35aa7cef7","_cell_guid":"6ec03dc8-7c53-4ce8-937f-9fb9234c765b","trusted":true},"cell_type":"markdown","source":"Como podemos observar pelo gráfico acima em geral as top 10 palavras são as mesmas entre os gêneros, porém, os gêneros *Metal* e *Hip-Hop* se destacam com diferentes temas em relação aos demais gêneros. <br>\n \nTambém observamos que *Country, Folk* e *Indie* abordam com maior frequência o tema \"*Home*\" em relação aos demais."},{"metadata":{"_uuid":"bbd9d52a-4887-4dba-9e73-d8c5c6652522","_cell_guid":"0c091bdd-e5be-4dd8-b3b9-14509335af83","trusted":true},"cell_type":"markdown","source":"## Análise de Bigramas"},{"metadata":{"_uuid":"995a510b-cc9b-4c57-8fb4-e8a1d8de6c6e","_cell_guid":"f70f7975-0eae-4de9-9e46-e86e299e9ac5","trusted":true},"cell_type":"markdown","source":"Além da análise das palavras mais comuns podemos explorar quais são os Bigramas mais comuns."},{"metadata":{"_uuid":"ddc98e53-7dff-43fd-9c7d-bfa43fc2db44","_cell_guid":"0581df03-2574-4eee-ae57-3437ab57f679","trusted":true,"_kg_hide-input":false},"cell_type":"code","source":"## ---- get_tokens_bigrams----|\n\nstart  <- Sys.time()\n\nlyrics <- readRDS('lyrics.rds')\n\nlyrics_token_bi <- unnest_tokens(lyrics,\n                                 input = lyrics,\n                                 output = term,\n                                 token = 'ngrams',\n                                 drop = TRUE,\n                                 to_lower = TRUE,\n                                 n = 2)\n\nprint(paste('Número de termos: ', nrow(lyrics_token_bi)))\n\nend = Sys.time()\nmem = pryr::mem_used()\n\nWriteLog('get tokens bigrams', start, end, mem)\n\n## ---- end-of-get_tokens_bigrams----|\n","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"40f15d14-925f-4b7d-98cd-ace79075f028","_cell_guid":"b1339cbe-b936-4479-aba1-2e24c806990e","trusted":true},"cell_type":"markdown","source":"Agora separamos o bigrama em duas palavras para eliminarmos as observações que contem stop words assim como fizemos com o a análise de palavras individuais. <br>"},{"metadata":{"_uuid":"9bb9bc69-7bdf-4fad-8e73-4fb8bac9efad","_cell_guid":"89b2260f-41f6-4b92-9767-a0c081a42ac0","trusted":true,"_kg_hide-input":true,"_kg_hide-output":true},"cell_type":"code","source":"rm(lyrics, plt, temp)\ninvisible(gc())\n","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"0f50c2fd-edfb-4274-84ad-143544242e05","_cell_guid":"a1ab0c89-f093-4573-b4d7-c7e2b434025b","trusted":true},"cell_type":"markdown","source":"Iremos eliminar as linhas onde ao menos uma das palavras do bigrama é uma stop words.\n \nAlém das stop words, por estarmos analisando letras de músicas, também vamos excluir as observações com palavras repetidas."},{"metadata":{"_uuid":"0391e592-1eff-48d4-9bcc-37b306a12248","_cell_guid":"79473b4b-3752-45e3-aa85-f19aca80e622","trusted":true,"_kg_hide-input":false},"cell_type":"code","source":"## ---- clean_bigrams----|\n\nstart  <- Sys.time()\n\nlyrics_token_bi <- separate(lyrics_token_bi, term, \n                            sep = ' ',\n                            into = c('w1', 'w2'), \n                            remove = FALSE)\n\nlyrics_token_bi <- filter(lyrics_token_bi, w1 != w2)\n\nlyrics_token_bi <- filter(lyrics_token_bi, nchar(w1) >= 3, nchar(w2) >= 3)\n\ninvisible(gc())\n\nlyrics_token_bi <- filter(lyrics_token_bi, \n                          !(w1 %in% custom_stop_words) & str_detect(w1, '^[a-z]'))\n\nlyrics_token_bi <- filter(lyrics_token_bi, \n                          !(w2 %in% custom_stop_words) & str_detect(w2, '^[a-z]'))\n\nsaveRDS(lyrics_token_bi, 'lyrics_token_bi.rds')\n\nprint(paste('Número de termos apos eliminação de stop words: ', \n            nrow(lyrics_token_bi)))\n\nmem  <- pryr::mem_used()\n\nrm(lyrics_token_bi)\ninvisible(gc)\n\nend = Sys.time()\n\nWriteLog('save tokens lyrics bigrams', start, end, mem)\n\n## ---- end-of-clean_bigrams----|\n","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"806c2347-fac0-4ce8-ad4f-b26682271902","_cell_guid":"e21fb25e-65e8-4912-a9f1-0617e76b7413","trusted":true},"cell_type":"markdown","source":"Vamos criar uma função para gerar um diagrama de rede com os 5 bigramas mais comuns para cada palavra selecionadas."},{"metadata":{"_uuid":"c2cb089c-a65f-4e5d-90cd-c8b7f3b77495","_cell_guid":"b04cc0bb-17d2-4041-97c8-893f894bd1fa","trusted":true},"cell_type":"code","source":"## ---- plot_network----|\n\nplot_network <- function(top_words = 25, \n                         artist_filter = NULL, \n                         genre_filter = NULL) {\n    # load required data\n    count_words  <- readRDS('lyrics_token.rds')\n    data         <- readRDS('lyrics_token_bi.rds')\n    \n    # apply filters\n\n    if (!is.null(artist_filter)) {count_words  <- filter(count_words, \n                                                         artist %in% artist_filter)}\n    \n    if (!is.null(genre_filter)) {count_words   <- filter(count_words, \n                                                         genre %in% genre_filter)}\n    \n    count_words  <- count(count_words, word, sentiment, sort = TRUE)\n    \n    top_words <- filter(count_words, row_number() <= top_words)\n    \n    if (!is.null(artist_filter)) {data  <- filter(data, \n                                                  artist %in% artist_filter)}\n    \n    if (!is.null(genre_filter)) {data  <- filter(data, \n                                                 genre %in% genre_filter)}\n    \n    data <- group_by(data, w1, w2) %>% \n               summarise(count = n()) %>%\n               ungroup() %>%\n               mutate(percent = count / sum(count)) %>%\n               group_by(w1) %>%\n               arrange(desc(count)) %>%\n               filter(row_number() <= 5) %>% \n               ungroup() %>% \n               filter(w1 %in% top_words$word)\n\n    # set nodes\n    nodes = tibble(label = unique(c(data$w1, data$w2)))\n    \n    nodes = tibble::rowid_to_column(nodes, \"id\")\n    \n    nodes$value = plyr::mapvalues(nodes$label, count_words$word, \n                                  count_words$n, warn_missing = FALSE)\n    \n    nodes$value = as.numeric(nodes$value)\n    \n    nodes$value = (nodes$value - min(nodes$value)) / \n                                    (max(nodes$value) - min(nodes$value))\n    \n    nodes$value = nodes$value * 100\n    \n    nodes$group = plyr::mapvalues(nodes$label, count_words$word, \n                                  count_words$sentiment, warn_missing = FALSE)\n\n    # set edges\n    edges  <- tibble(from   = data$w1,\n                     to     = data$w2,\n                     weight = data$percent)\n    \n    edges$from = plyr::mapvalues(edges$from, nodes$label, \n                                 nodes$id, warn_missing = FALSE)\n    \n    edges$to = plyr::mapvalues(edges$to, nodes$label, \n                               nodes$id, warn_missing = FALSE)\n\n    net_graph <- visNetwork(nodes, edges, height = \"500px\", width = \"100%\") %>% \n                     visNodes(scaling = list(min = 10, max = 50), \n                              physics = TRUE, mass = 1.25) %>% \n                     visEdges(arrows = \"to\") %>% \n                     visOptions(highlightNearest = TRUE, \n                                nodesIdSelection = TRUE,\n                                selectedBy = \"group\") %>%\n                     visGroups(groupname = \"positive\", color = \"green\")  %>% \n                     visGroups(groupname = \"neutral\") %>% \n                     visGroups(groupname = \"negative\", color = \"red\") %>% \n                     visLegend(width = 0.1)\n    \n    rm(count_words, data)\n    invisible(gc)\n    \n    # return graph\n    return (net_graph)\n}\n\n## ---- end-of-plot_network----|\n","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"fcf7a601-747b-44cf-bac3-cf37c9ae03e0","_cell_guid":"3774d57c-9ac0-4d0f-af34-de9b42cd1f23","trusted":true},"cell_type":"markdown","source":"Aqui estamos vendo os 5 bigramas mais comuns para as 25 palavras mais usadas em todo o dataset."},{"metadata":{"_uuid":"40ef183c-5b4b-41a9-9db1-a894b78d32a1","_cell_guid":"5c3479f3-c81a-49e1-afe8-112d6a968b9d","trusted":true,"_kg_hide-input":true},"cell_type":"code","source":"## ---- plot_network_all----|\n\nstart  <- Sys.time()\n\nnet_graph <- plot_network(top_words = 25)\n\nhtmlwidgets::saveWidget(net_graph, \"net_graph.html\")\n\ndisplay_html('<iframe src=\"net_graph.html\" width=100% height=600></iframe>')\n\nend = Sys.time()\nmem = pryr::mem_used()\n\nWriteLog('plot net 1', start, end, mem)\n\n## ---- end-of-plot_network_all----|\n","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"398367d5-34ce-40ff-9d2f-50f61d201a88","_cell_guid":"12aa46de-22d2-4bd5-8ce9-38520b6f6e12","trusted":true},"cell_type":"markdown","source":"Agora podemos aplicar um filtro no dataset de bigramas e verificar a rede de bigramas de um artista em aprticular como **Bob Dylan**.\n\nAqui estamos vendo os 5 bigramas mais comuns para as 50 palavras mais usadas pelo artista."},{"metadata":{"_uuid":"b71932a2-4c1d-4adb-b059-9c21815edcf7","_cell_guid":"f35aba8a-7214-4111-98a5-231f47b07e31","trusted":true,"_kg_hide-input":true},"cell_type":"code","source":"## ---- plot_network_artist----|\n\nstart  <- Sys.time()\n\nnet_graph <- plot_network(top_words = 50, artist_filter = 'bob-dylan')\n\nhtmlwidgets::saveWidget(net_graph, \"net_graph_artist.html\")\n\ndisplay_html('<iframe src=\"net_graph_artist.html\" width=100% height=600></iframe>')\n\nend = Sys.time()\nmem = pryr::mem_used()\n\nWriteLog('plot net 2', start, end, mem)\n\n## ---- end-of-plot_network_artist----|\n","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"1be0ab08-dbca-43f4-9cab-b433075f7006","_cell_guid":"2ebeed0e-088b-43f0-8fca-016a91e88e1d","trusted":true},"cell_type":"markdown","source":"Podemos fazer o mesmo filtro para um gênero musical específico como *Metal* e *Rock*."},{"metadata":{"_uuid":"12f481db-c90a-4f44-9498-5085a424723c","_cell_guid":"3443c851-30c2-4fcf-ba8b-f2212fae9f81","trusted":true,"_kg_hide-input":true},"cell_type":"code","source":"## ---- plot_network_genre_1----|\n\nstart  <- Sys.time()\n\nnet_graph <- plot_network(top_words = 25, genre_filter = 'Metal')\n\nhtmlwidgets::saveWidget(net_graph, \"net_graph_genre_1.html\")\n\ndisplay_html('<iframe src=\"net_graph_genre_1.html\" width=100% height=600></iframe>')\n\nend = Sys.time()\nmem = pryr::mem_used()\n\nWriteLog('plot net 3', start, end, mem)\n\n## ---- end-of-plot_network_genre_1----|\n","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"d7c16a8e-1eef-4d48-b5ba-54bffb8ecfb3","_cell_guid":"5158693f-7904-4ba5-92a8-5dbff9d1b98e","trusted":true,"_kg_hide-input":true},"cell_type":"code","source":"## ---- plot_network_genre_2----|\n\nstart  <- Sys.time()\n\nnet_graph <- plot_network(top_words = 25, genre_filter = 'Rock')\n\nhtmlwidgets::saveWidget(net_graph, \"net_graph_genre_2.html\")\n\ndisplay_html('<iframe src=\"net_graph_genre_2.html\" width=100% height=600></iframe>')\n\nend = Sys.time()\nmem = pryr::mem_used()\n\nWriteLog('plot net 4', start, end, mem)\n\n## ---- end-of-plot_network_genre_2----|\n","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"2aac04c2-1f72-4a50-acd3-0857393956d5","_cell_guid":"c2b61dde-a8be-4450-8d49-e6d10080b5e3","trusted":true},"cell_type":"markdown","source":"A exemplo do que fizemos com a contagem individual de palavras vamos verificar quais os bigramas mais utilizados por gênero musical."},{"metadata":{"_uuid":"b82fa750-8bac-4fe2-aaf6-f2bbf703b590","_cell_guid":"a79398bc-2d4f-434d-89b0-1dea058e9451","trusted":true,"_kg_hide-input":false,"_kg_hide-output":false},"cell_type":"code","source":"## ---- top_bigrams_token----|\n\nstart  <- Sys.time()\n\nlyrics_token_bi <- readRDS('lyrics_token_bi.rds')\n\ngw <- group_by(lyrics_token_bi, genre, term) %>%\n  summarise(gw_c = n()) %>% \n  ungroup() %>% \n  group_by(genre) %>%\n  mutate(gw_p = gw_c / sum(gw_c)) %>% \n  ungroup() %>%\n  arrange(genre, desc(gw_p)) %>% \n  group_by(term) %>% \n  mutate(w_c = sum(gw_c))\n\n# contagem por palavra\nw <- group_by(lyrics_token_bi, term) %>%\n  summarise(w_c = n()) %>% \n  ungroup() %>%\n  mutate(w_p = w_c / sum(w_c)) %>%\n  arrange(desc(w_c))\n\nmem  <- pryr::mem_used()\n\nrm(lyrics_token_bi)\ninvisible(gc)\n\nend = Sys.time()\nmem = pryr::mem_used()\n\nWriteLog('calculate tokens lyrics bigram count', start, end, mem)\n\n## ---- end-of-top_bigrams_token----|\n","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"5b01057d-5920-423e-b5bc-4f89a015a552","_cell_guid":"2fa8ac74-33a2-4e99-ad72-50fd20910805","trusted":true},"cell_type":"markdown","source":"Vamos verificar a nuvem de termos de bigramas."},{"metadata":{"_uuid":"7a89915e-1b70-4f1c-a94d-d806683baef6","_cell_guid":"c60db1b8-fb87-4974-9fee-658e66be3bcf","trusted":true,"_kg_hide-input":true},"cell_type":"code","source":"## ---- view_wordcloud_token_bigrams----|\n\nstart  <- Sys.time()\n\ntemp <- arrange(w, desc(w_c)) %>% \n    filter(row_number() < 101) %>% \n    mutate(angle = 90 * sample(c(0, 1), n(), replace = TRUE, prob = c(70, 30)))\n\nplt <- ggplot(data = temp,\n  aes(label = term, \n      size = w_c,\n      color = factor(sample.int(20, nrow(temp), replace = TRUE)), \n      angle = angle)) +\n  geom_text_wordcloud_area(eccentricity = 1.1) +\n  scale_size_area(max_size = 25) +\n  theme_minimal()\n\nmem  <- pryr::mem_used()\n\nrm(w)\ninvisible(gc)\n\nsuppressWarnings(print(plt))\n\nend = Sys.time()\nmem = pryr::mem_used()\n\nWriteLog('plot tokens lyrics bigrams', start, end, mem)\n\n## ---- end-of-view_wordcloud_token_bigrams----|\n","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"92ffaf17-6091-4cfd-b080-8de42d024322","_cell_guid":"30909f95-58d0-41b6-adce-f296981895d3","trusted":true,"_kg_hide-input":true},"cell_type":"code","source":"## ---- view_wordcloud_token_bigrams_per_genre----|\n\nstart  <- Sys.time()\n\ntemp <- group_by(gw, genre) %>%  \n    arrange(desc(gw_p)) %>% \n    filter(row_number() < 26) %>%\n    mutate(angle = 90 * sample(c(0, 1), n(), replace = TRUE, prob = c(100, 0)), \n           freq_sd = (gw_c - min(gw_c)) / (max(gw_c) - min(gw_c))) %>% \n    ungroup()\n\noptions(repr.plot.width = 20, repr.plot.height = 24)\n\nplt <- ggplot(data = temp,\n  aes(label = term, \n      size = freq_sd,\n      color = factor(sample.int(20, nrow(temp), replace = TRUE)), \n      angle = angle)) +\n  geom_text_wordcloud_area() +\n  scale_size_area(max_size = 20) +\n  facet_wrap(vars(genre), nrow = 5) +\n  theme(text = element_text(size = 20))  \n\nsuppressWarnings(print(plt))\n\nend = Sys.time()\nmem = pryr::mem_used()\n\nWriteLog('plot tokens lyrics bigrams per genre', start, end, mem)\n\n## ---- end-of-view_wordcloud_token_bigrams_per_genre----|\n","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"07b88bae-a721-4214-b8db-b598c619ecd9","_cell_guid":"bf5d1579-1981-4e09-ad86-d89264fb6e80","trusted":true},"cell_type":"markdown","source":"Agora verificamos os top 5 bigramas por gênero musical."},{"metadata":{"_uuid":"80d3105b-9e64-4f9a-a664-3edfaed0e4e6","_cell_guid":"c4853ec3-8c1e-449d-b9fc-b7b8230edd47","trusted":true,"_kg_hide-input":true},"cell_type":"code","source":"## ---- top_5_words_token_bigrams----|\n\nstart  <- Sys.time()\n\noptions(repr.plot.width = 20, repr.plot.height = 12)\n\ngw %>%\n  group_by(genre) %>% \n  arrange(desc(gw_p)) %>% \n  filter(row_number() <= 5) %>%\n  mutate(rank = row_number()) %>% \n  ggplot() +\n  geom_bar(stat = 'identity',\n           aes(y = gw_p, x = fct_reorder(term, w_c), fill = genre)) +\n  geom_text(aes(label = as.character(rank), x = fct_reorder(term, w_c), y = 0.0002)) +\n  facet_wrap(vars(genre), nrow = 1) +\n  coord_flip() +\n  xlab('Term') +\n  ylab('Relative frequency') +\n  labs(title = 'Top 5 bigrams by music genre') +\n  theme(legend.position = 0,\n        axis.text.x = element_blank(),\n        axis.ticks.x = element_blank(),\n        text = element_text(size = 20))\n\nmem  <- pryr::mem_used()\n\nrm(gw)\ninvisible(gc)\n\nend = Sys.time()\n\nWriteLog('plot top words bigrams', start, end, mem)\n\n## ---- end-of-top_5_words_token_bigrams----|\n","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"4ce149e4-e3f5-455e-85fd-ffe2b4533ba1","_cell_guid":"d6d7c2a4-3502-44b6-9193-84c2e7e31182","trusted":true},"cell_type":"markdown","source":"# TF-IDF (Term Frequency - Inverse Document Frequency)"},{"metadata":{"_uuid":"0eafa655-49ba-48f4-a07a-7c7dd3db6fec","_cell_guid":"e79c8a3b-55b1-40f9-a342-8be6914da17a","trusted":true},"cell_type":"markdown","source":"Esta métrica é uma medida estatística que tem o intuito de indicar a importância de uma palavra de um documento em relação a uma coleção de documentos.\n\nO valor tfidf de uma palavra aumenta proporcionalmente à medida que aumenta o número de ocorrências dela em um documento, no entanto, esse valor é equilibrado pela frequência da palavra no corpus. Isso auxilia a distinguir o fato de a ocorrência de algumas palavras serem geralmente mais comuns que outras como as stopwords.\n\n\\begin{equation}\nW_{i,j} = tf_{i,j} * log(\\frac{N}{df_i})\n\\end{equation}\n\n\\begin{equation}\ntf_{i,j} = \\text{ número de ocorrencias do termo } \\textit{( i )} \\text{ em } \\textit{ j } \\text{ (documento)}\n\\end{equation} \n\n\\begin{equation}\ndf_{i} = \\text{ número de documentos contendo } \\textit {i}\n\\end{equation} \n\n\\begin{equation}\nN = \\text{ número total de documentos }\n\\end{equation} \n\n\\begin{equation}\nW_{i,j} = \\text{ Term Frequency - Inverse Document Frequency }\n\\end{equation} \n\nNeste exercício o documento será um gênero musical.\n\nVamos verificar se conseguimos identificar as principais palavras de cada gênero musical sem o auxílio de um dicionário de stopwords."},{"metadata":{"_uuid":"d1210062-f61e-4d40-944d-392f81537e92","_cell_guid":"443a81bd-b36a-4b39-b325-8d5d2e9e9bc7","trusted":true},"cell_type":"markdown","source":"Começamos calculando a frequência de cada termo."},{"metadata":{"_uuid":"ee24dcb9-f55a-457a-bfdb-dd6039b27d2c","_cell_guid":"491c6932-fa59-4f69-890e-4dea65c63929","trusted":true,"_kg_hide-input":true},"cell_type":"code","source":"## ---- calculate_term_frequency----|\n\nstart  <- Sys.time()\n\nlyrics <- readRDS('lyrics.rds')\n\n# tokennize dataset but do not treat for stopwords.\nlyrics_token <- unnest_tokens(lyrics,\n                              input = lyrics,\n                              output = word,\n                              token = 'words',\n                              drop = TRUE,\n                              to_lower = TRUE)\n\n# calculate the term frequency by gere.\nlyrics_token <- lyrics_token[, c('genre','word')] %>% \n    filter(str_detect(word, \"^[a-z']\")) %>% \n    group_by(genre, word) %>% \n    summarise(n = n()) %>% \n    group_by(genre) %>% \n    mutate(total = sum(n)) %>% \n    mutate(tf = n / total) %>% \n    group_by(genre) %>% \n    arrange(desc(n)) %>%\n    mutate(rank_tf = row_number()) %>%\n    ungroup()\n\n# display the most commom terms based on its term frequency.\n    filter(lyrics_token, rank_tf <= 3) %>% \n    arrange(genre, rank_tf)\n\nmem  <- pryr::mem_used()\n\nrm(lyrics)\ninvisible(gc)\n\nend = Sys.time()\nmem = pryr::mem_used()\n\nWriteLog('calculate tf', start, end, mem)\n\n## ---- end-of-calculate_term_frequency----|\n","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"9d4be86f-f61f-4f1b-9080-2be5ca4c0960","_cell_guid":"738e1e1d-1017-464f-ad3a-3527cc97f18a","trusted":true},"cell_type":"markdown","source":"Podemos perceber que são exatamente as stop words os termos com maior frequência.\n\nPodemos visualizar a quantidade de termos por frequência em um histograma.\n\nVerificamos que a maioria dos termos tem uma frequência muito baixa, como é esperado."},{"metadata":{"_uuid":"3dcf7814-079f-4f69-a9cc-c5e5c5329866","_cell_guid":"2d8498e5-b9e7-4769-ac15-ba0a503c9990","trusted":true,"_kg_hide-input":true},"cell_type":"code","source":"## ---- histogram_term_frequency----|\n\nstart  <- Sys.time()\n\noptions(repr.plot.width = 20, repr.plot.height = 24)\n\nggplot(lyrics_token, aes(x = n / total, fill = genre)) +\n  geom_histogram(show.legend = FALSE, bins = 60) + \n  facet_wrap( ~ genre, ncol = 2, scales = 'free') +\n  theme(text = element_text(size = 20))\n\nend <- Sys.time()\n\nWriteLog('plot histogram of tf', start, end, pryr::mem_used())\n\n## ---- end-of-histogram_term_frequency----|\n","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"6b56f604-353d-416b-b689-1255ff323972","_cell_guid":"c1242387-baa8-469e-935b-56a28de5cfbd","trusted":true},"cell_type":"markdown","source":"Aqui verificamos a relação entre a frequência do termo, no gênero com, o rank do termo."},{"metadata":{"_uuid":"1c19f4ba-8ea8-450a-8fff-f420be35d211","_cell_guid":"0ea193a4-438b-48dd-9531-db2ba770dccc","trusted":true,"_kg_hide-input":true},"cell_type":"code","source":"## ---- term_frequency_vs_rank----|\n\nstart  <- Sys.time()\n\noptions(repr.plot.width = 20, repr.plot.height = 12)\n\nggplot(lyrics_token, aes(x = rank_tf, y = tf, color = genre)) +\n  geom_line(alpha = 0.8, size = 1.1, show.legend = FALSE) +\n  scale_x_log10() + scale_y_log10() +\n  xlab(\"Rank - Term frequency\") + ylab(\"Term frequency\") + \n  labs(title = 'Term frequency vs Rank - Log Scale') +\n  theme(text = element_text(size = 20))\n\nend  <- Sys.time()\n\nWriteLog('plot term frequency vs rank', start, end, pryr::mem_used())\n\n## ---- end-of-term_frequency_vs_rank----|\n","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"9d1f7228-ab6d-4c60-8c12-4db2fcbc9713","_cell_guid":"291a9e7c-046e-4b6f-8f66-03f3ac2809b3","trusted":true},"cell_type":"markdown","source":"O fato de haver algumas canções em outros idiomas, que não o inglês, faz com que a técnica TF-IDF não seja bem-sucedida em eliminar as stopwords.\n\nEm geral as stop words estão presentes em todos os documentos, fazendo com que o termo $ log(\\frac{N}{df_i}) $ tenha o resultado zero, zerando assim a estatística TF-IDF para o termo.\n\nComo existem vários idiomas no dataset esta tendência não se observa fazendo com que não ocorra a eliminação das stop words."},{"metadata":{"_uuid":"2fd7900f-2320-4c21-a323-86f0c058c105","_cell_guid":"8e2d9926-3cde-44d3-b31b-1ca491c5c4a2","trusted":true,"_kg_hide-output":false,"_kg_hide-input":true},"cell_type":"code","source":"## ---- calculate_idf----|\n\nstart  <- Sys.time()\n\nlyrics_token <- bind_tf_idf(tbl = lyrics_token,  \n                            term = word, \n                            document = genre, \n                            n = n) %>% \n                arrange(desc(tf_idf)) %>% \n                group_by(genre) %>% \n                mutate(rank_tf_idf  = row_number()) %>% \n                arrange(genre, rank_tf_idf) %>% \n                ungroup()\n\nfilter(lyrics_token, rank_tf_idf  <= 3)\n\nend = Sys.time()\nmem = pryr::mem_used()\n\nWriteLog('calculate idf', start, end, mem)\n\n## ---- end-of-calculate_idf----|\n","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"8860ef9a-6a2f-48ac-85f4-7991fdd1411a","_cell_guid":"e4af42ec-a14a-4658-a00b-7a7483b33580","trusted":true,"_kg_hide-input":true},"cell_type":"code","source":"## ---- top_words_per_genre_tdidf----|\n\nstart  <- Sys.time()\n\noptions(repr.plot.width = 20, repr.plot.height = 24)\n\n    group_by(lyrics_token, genre) %>%\n    top_n(10, tf_idf) %>%\n    ungroup() %>% \n    mutate(word = reorder(word, desc(tf_idf))) %>% \n    ggplot(aes(x = fct_reorder(word, tf_idf), \n               y = tf_idf, \n               fill = genre)) +\n        geom_col(show.legend = FALSE) +\n        facet_wrap( ~ genre, ncol = 2, scales = \"free\") +\n        coord_flip() +\n        labs(x = NULL, y = \"TF-IDF\") +\n        theme(text = element_text(size = 20), \n              axis.ticks.x = element_blank(),\n              axis.text.x = element_blank())\n\nend  <- Sys.time()\n\nWriteLog('print tf idf', start, end, pryr::mem_used())\n\n## ---- end-of-calculate_idf----|\n","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"be361d9e-d046-4ce5-9065-17e8e47f3038","_cell_guid":"db5d1f74-322f-42a3-a184-23947db97e43","trusted":true,"_kg_hide-input":true},"cell_type":"code","source":"rm(lyrics_token)\ninvisible(gc)\n","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"879be036-a3a6-4c72-b374-66227981359e","_cell_guid":"50020b9b-c1e0-4c76-b83e-24d3247e6bfb","trusted":true},"cell_type":"markdown","source":"# LDA Topic Modelling"},{"metadata":{"_uuid":"164e5136-0b47-4e8f-b112-bf4c7d532781","_cell_guid":"41cea303-28dd-4591-8dd7-d1a30d1834fc","trusted":true},"cell_type":"markdown","source":"Agora vamos tentar utilizar a técnica de topic modeling **Latent Dirichlet Allocation (LDA)** para responder a questão.\n\n> **Seria possível classificar as canções em grupos que representam os seus respectivos gêneros musicais apenas analisando as letras das músicas?**\n\nO dataset que iremos utilizar é o mesmo onde já eliminamos as stop words no início de nosso exercício.\n\nPara contornar limitações computacionais vamos limitar o data set as palavras que aparecem em pelo menos mais de **2 músicas**."},{"metadata":{"trusted":true},"cell_type":"code","source":"## ---- filter_tokens_LDA----|\n\nstart  <- Sys.time()\n\nlyrics_token <- readRDS('lyrics_token.rds')\ndistinct_words <- distinct(lyrics_token, index, word)\n\nsong_count <- length(unique(distinct_words$index))\n\nreject_words <- count(distinct_words, word, sort = TRUE) %>% \n                    mutate(prop = n / song_count * 100) %>% \n                    arrange(desc(prop)) %>% \n                    filter(n <= 2)\n\nreject_words <- reject_words$word\n\nprint(paste('Número de termos que aparecem em apenas uma música: ', \n            length(reject_words)))\n\nlyrics_token <- filter(lyrics_token, !(word %in% reject_words))\n\nprint(paste('Número de tokens: ', \n            nrow(lyrics_token)))\n\nprint(paste('Número de termos restante: ', \n            length(unique(lyrics_token$word))))\n\nmem  <- pryr::mem_used()\n\nrm(reject_words, distinct_words, song_count)\ninvisible(gc)\n\nend = Sys.time()\n\nWriteLog('filter tokens LDA', start, end, mem)\n\n## ---- end-of-filter_tokens_LDA----|\n","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"Mesmo limitando o dataset a palavras que aparecem em mais de duas músicas, necessitaremos limitar o dataset a uma amostra de 50.000 músicas distintas, visto que o tempo de processamento é superior ao permitido para este ambiente."},{"metadata":{"trusted":true},"cell_type":"code","source":"## ---- sampling_tokens_LDA----|\n\nstart  <- Sys.time()\n\nprint(paste('Número total de músicas: ', length(unique(lyrics_token$index))))\n\nsongs_sample  <- sample(unique(lyrics_token$index), 50000, replace = FALSE)\n\nprint(paste('Número de músicas selecionadas para o LDA: ', length(songs_sample)))\n\nlyrics_token <- filter(lyrics_token, index %in% songs_sample)\n\nmem  <- pryr::mem_used()\nrm(songs_sample)\n\nend = Sys.time()\n\nWriteLog('sampling tokens LDA', start, end, mem)\n\n## ---- end-of-sampling_tokens_LDA----|\n","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"Transformamos o nosso dataset em uma matriz de frequência de documentos vs termos **(Documento Term Matrix)**.\n"},{"metadata":{"_uuid":"c489e16b-5d23-4f3f-a81f-17087aec94a8","_cell_guid":"d08e7889-dff2-43ec-9a4c-8c2747baecf2","trusted":true},"cell_type":"code","source":"## ---- create_dtm----|\n\nstart  <- Sys.time()\n\ndtm <- cast_dtm(data = count(lyrics_token, index, word, sort = TRUE),\n                weighting = tm::weightTf,\n                document = index, \n                term = word, \n                value = n)\n\ndtm\n\nsaveRDS(dtm, 'dtm.rds')\n\nmem  <- pryr::mem_used()\n\nend = Sys.time()\n\nWriteLog('calculate dtm', start, end, mem)\n\n## ---- end-of-create_dtm----|\n","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"96613f95-a042-4dae-9184-8c0fc44016bf","_cell_guid":"3be50b50-2801-4be5-8859-83601e2a15eb","trusted":true},"cell_type":"markdown","source":"Agora treinamos um modelo com **10 tópicos** para verificarmos se eles de alguma forma representam os gêneros musicais presentes no dataset."},{"metadata":{"_uuid":"1108d5a7-77e6-4c44-8400-86aa8d71795c","_cell_guid":"72d876fe-75c8-4d0c-bd4c-2d73df659f8b","trusted":true},"cell_type":"code","source":"## ---- LDA_10_topics----|\n\nstart  <- Sys.time()\n\ntpm <- LDA(dtm, k = 10, control = list(seed = 123456))\n\ntpm\nsummary(tpm)\n\nsaveRDS(tpm, 'tpm_10.rds')\n\nmem  <- pryr::mem_used()\ninvisible(gc)\n\nend = Sys.time()\n\nWriteLog('calculate tpm 10', start, end, mem)\n\n## ---- end-of-LDA_10_topics----|\n","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"ae9d81b5-e06f-4a49-9db2-4474b234890f","_cell_guid":"9da91e12-be6b-42e8-8f3b-c3f7b7511f34","trusted":true},"cell_type":"markdown","source":"Agora verificamos quais são os termos com maior **( $ \\beta $ )** que representa a probabilidade do termo pertencer ao tópico.\n\nPodemos verificar que alguns tópicos se parecem bastante com as palavras mais comuns de alguns gêneros musicais que observamos na fase de análise exploratória de dados.\n\nDestaque para o gênero **Hip-Hop** onde claramente conseguimos verificar os mesmos termos no tópico gerado pelo modelo.\n\nAlguns tópicos porém não fazem o menor sentido, claramente aqui temos o efeito de termos algumas músicas em outros idiomas, um tópico quase que classifica as canções em espanhol em um mesmo cluster."},{"metadata":{"_uuid":"a3a0e373-ded1-4ff0-b5ec-0647570ead5b","_cell_guid":"da8e0023-a796-41d4-8d92-dba2559376b6","trusted":true,"_kg_hide-input":true},"cell_type":"code","source":"## ---- top_words_per_topic_LDA_10----|\n\nstart  <- Sys.time()\n\noptions(repr.plot.width = 20, repr.plot.height = 12)\n\nterm_topics <- tidy(tpm, matrix = \"beta\")\n\nterm_top_terms <- term_topics %>%\n  group_by(topic) %>%\n  top_n(10, beta) %>%\n  ungroup() %>%\n  arrange(topic, -beta)\n\nterm_top_terms %>%\n  mutate(term = reorder(term, beta)) %>%\n  ggplot(aes(term, beta, fill = factor(topic))) +\n  geom_col(show.legend = FALSE) +\n  facet_wrap(~ topic, scales = \"free\", nrow = 2) +\n  coord_flip() +\n  theme(text = element_text(size = 20), \n        axis.text.x = element_blank(), \n        axis.ticks = element_blank())\n\nmem  <- pryr::mem_used()\n\nrm(term_topics)\ninvisible(gc)\n\nend <- Sys.time()\n\nWriteLog('plot top words lda 10', start, end, mem)\n\n## ---- end-of-top_words_per_topic_LDA_10----|\n","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"d6ffa413-f5c7-435a-bff6-2e8ccb7eb860","_cell_guid":"874bc322-01b7-4449-9d49-9a8b0c7864f7","trusted":true},"cell_type":"markdown","source":"Podemos fazer a junção com o dataset de canções originais e verificar, por gênero musical, para qual tópico cada canção foi assignada pelo modelo LDA.\n\nA probabilidade de cada canção pertencer a um determinado tópico é dada pela estatística **( $ \\gamma $ )** do modelo LDA.\n"},{"metadata":{"_uuid":"018ecf67-d2fb-46e9-9f52-7aba6e709a6a","_cell_guid":"c1e5e05d-94b2-403e-a25c-5a6c37b0874f","trusted":true,"_kg_hide-input":true},"cell_type":"code","source":"## ---- classification_per_genre_LDA_10----|\n\nstart  <- Sys.time()\n\noptions(repr.plot.width = 20, repr.plot.height = 8)\n\nlyrics <- readRDS('lyrics.rds')\nsongs_topics <- tidy(tpm, matrix = \"gamma\")\n\nlyrics$index <- as.character(lyrics$index)\n\ninner_join(lyrics, songs_topics, by = c('index' = 'document')) %>% \n    select(index, song, year, artist, genre, decade, topic, gamma) %>% \n        ggplot(aes(x = factor(topic), y = gamma, fill = genre)) +\n            geom_boxplot(show.legend = FALSE, outlier.size = 0.1) +\n            facet_wrap(~ genre, nrow = 2) +\n            ylim(0, 1) +\n            xlab('Topic') + ylab('gamma') +\n            labs(title = 'Topic classification per Genre') +\n            theme(text = element_text(size = 20), \n                  axis.text.y = element_blank(), \n                  axis.ticks.y = element_blank())\n\nmem  <- pryr::mem_used()\n\nrm(lyrics, songs_topics)\ninvisible(gc)\n\nend  <- Sys.time()\n\nWriteLog('plot classification per genre lda 10', start, end, mem)\n\n## ---- end-of-classification_per_genre_LDA_10----|\n","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"Calculando a média da estatística **( $ \\gamma $ )**, por gênero, podemos visualizar claramente qual o provável tópico, assignado pelo modelo, para cada gênero musical."},{"metadata":{"_uuid":"9827025a-51cc-4995-a90f-0d9f1bc0dd92","_cell_guid":"482760cd-603c-438b-b6b1-767edf9ace2a","trusted":true,"_kg_hide-input":true},"cell_type":"code","source":"## ---- classification_per_genre_LDA_10_avg_gamma----|\n\nstart  <- Sys.time()\n\noptions(repr.plot.width = 20, repr.plot.height = 8)\n\nlyrics <- readRDS('lyrics.rds')\nsongs_topics <- tidy(tpm, matrix = \"gamma\")\n\nlyrics$index <- as.character(lyrics$index)\n\ninner_join(lyrics, songs_topics, by = c('index' = 'document')) %>% \n    select(index, song, year, artist, genre, decade, topic, gamma) %>% \n    group_by(genre, topic) %>% \n    summarize(mean_gamma = mean(gamma, na.rm = TRUE)) %>% \n    arrange(topic) %>%\n        ggplot(aes(x = factor(topic), y = genre, fill = mean_gamma)) +\n            geom_bin2d(stat = 'identity', show.legend = FALSE) +\n            geom_text(aes(label = round(mean_gamma, 4)), color = 'white', size = 6) +\n            scale_fill_gradient(low = \"#E53935\", high = \"#196F3D\") +\n            theme_minimal() + ylab('Genre') + xlab('Topic') + \n            labs(title = 'Average Gamma by Genre vs Topic') +\n            theme(text = element_text(size = 20), \n                  panel.grid = element_blank())\n\nmem  <- pryr::mem_used()\n\nend  <- Sys.time()\n\nWriteLog('plot classification per gere lda 10 avg gamma', start, end, mem)\n\n## ---- end-of-classification_per_genre_LDA_10_avg_gamma----|\n","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"# Conclusão"},{"metadata":{"trusted":true},"cell_type":"markdown","source":"Como podemos observar pelo exercício executado acima a técnica TF-IDF não é adequada para este dataset, para a eliminação de stop words, principalmente por que temos algumas canções em outros idiomas que não o idioma principal do dataset (inglês).\n\nAo utilizar a técnica de topic modeling verificamos que não é possível identificar os 10 gêneros musicais apenas analisando as letras das canções, porém o modelo apresentou alguma eficácia para as músicas do gênero *Hip-Hop*.\n\nTambém verificamos que o algoritmo foi capaz de segregar boa parte das músicas em espanhol e português das músicas em inglês.\n\nPela análise das probabilidades de classificação dos documentos é possível identificar que talvez 4 ou 5 tópicos poderiam segregar as canções, não necessariamente em gêneros musicais, mas em temas recorrentes, o que faz mais muito sentido, pois na análise exploratória de dados verificamos que os mesmos temas são recorrentes em diferentes gêneros musicais.\n\nVamos verificar como ficaria a classificação das canções por temas e por gênero musical utilizando um modelo de 5 tópicos apenas."},{"metadata":{"_kg_hide-input":true,"_kg_hide-output":false,"trusted":true},"cell_type":"code","source":"## ---- LDA_5_topics----|\n\nstart  <- Sys.time()\n\ntpm <- LDA(dtm, k = 5, control = list(seed = 123456))\n\ntpm\nsummary(tpm)\n\nsaveRDS(tpm, 'tpm_5.rds')\n\nmem  <- pryr::mem_used()\n\nrm(dtm)\ninvisible(gc)\n\nend = Sys.time()\n\nWriteLog('calculate tpm 5', start, end, mem)\n\n## ---- end-of-LDA_5_topics----|\n","execution_count":null,"outputs":[]},{"metadata":{"_kg_hide-input":true,"trusted":true},"cell_type":"code","source":"## ---- top_words_per_topic_LDA_5----|\n\nstart  <- Sys.time()\n\noptions(repr.plot.width = 20, repr.plot.height = 12)\n\nterm_topics <- tidy(tpm, matrix = \"beta\")\n\nterm_top_terms <- term_topics %>%\n  group_by(topic) %>%\n  top_n(20, beta) %>%\n  ungroup() %>%\n  arrange(topic, -beta)\n\nterm_top_terms %>%\n  mutate(term = reorder(term, beta)) %>%\n  ggplot(aes(term, beta, fill = factor(topic))) +\n  geom_col(show.legend = FALSE) +\n  facet_wrap(~ topic, scales = \"free\", nrow = 1) +\n  coord_flip() +\n  theme(text = element_text(size = 20), \n        axis.text.x = element_blank(), \n        axis.ticks = element_blank())\n\nmem  <- pryr::mem_used()\n\nrm(term_topics)\ninvisible(gc)\n\nend <- Sys.time()\n\nWriteLog('plot top words lda 5', start, end, mem)\n\n## ---- end-of-top_words_per_topic_LDA_5----|\n","execution_count":null,"outputs":[]},{"metadata":{"_kg_hide-input":true,"trusted":true},"cell_type":"code","source":"## ---- classification_per_genre_LDA_5----|\n\nstart  <- Sys.time()\n\noptions(repr.plot.width = 20, repr.plot.height = 8)\n\nlyrics <- readRDS('lyrics.rds')\nsongs_topics <- tidy(tpm, matrix = \"gamma\")\n\nlyrics$index <- as.character(lyrics$index)\n\ninner_join(lyrics, songs_topics, by = c('index' = 'document')) %>% \n    select(index, song, year, artist, genre, decade, topic, gamma) %>% \n        ggplot(aes(x = factor(topic), y = gamma, fill = genre)) +\n            geom_boxplot(show.legend = FALSE, outlier.size = 0.1) +\n            facet_wrap(~ genre, nrow = 2) +\n            ylim(0, 1) +\n            xlab('Topic') + ylab('gamma') +\n            labs(title = 'Topic classification per Genre') +\n            theme(text = element_text(size = 20), \n                  axis.text.y = element_blank(), \n                  axis.ticks.y = element_blank())\n\nmem  <- pryr::mem_used()\ninvisible(gc)\n\nend  <- Sys.time()\n\nWriteLog('plot classification per genre lda 5', start, end, mem)\n\n## ---- end-of-classification_per_genre_LDA_5----|\n","execution_count":null,"outputs":[]},{"metadata":{"_kg_hide-input":true,"trusted":true},"cell_type":"code","source":"## ---- classification_per_genre_LDA_5_avg_gamma----|\n\nstart  <- Sys.time()\n\noptions(repr.plot.width = 20, repr.plot.height = 10)\n\nlyrics$index <- as.character(lyrics$index)\n\ninner_join(lyrics, songs_topics, by = c('index' = 'document')) %>% \n    select(index, song, year, artist, genre, decade, topic, gamma) %>% \n    group_by(genre, topic) %>% \n    summarize(mean_gamma = mean(gamma, na.rm = TRUE)) %>% \n    arrange(topic) %>%\n        ggplot(aes(x = factor(topic), y = genre, fill = mean_gamma)) +\n            geom_bin2d(stat = 'identity', show.legend = FALSE) +\n            geom_text(aes(label = round(mean_gamma, 4)), color = 'white', size = 6) +\n            scale_fill_gradient(low = \"#E53935\", high = \"#196F3D\") +\n            theme_minimal() + ylab('Genre') + xlab('Topic') + \n            labs(title = 'Average Gamma by Genre vs Topic') +\n            theme(text = element_text(size = 20), \n                  panel.grid = element_blank())\n\nmem  <- pryr::mem_used()\ninvisible(gc)\n\nend  <- Sys.time()\n\nWriteLog('plot classification per genre lda 5 avg gamma', start, end, mem)\n\n## ---- end-of-classification_per_genre_LDA_5_avg_gamma----|\n","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"Para finalizar, vamos observar as canções que tem a maior probabilidade de pertencer ao tópico que aparentemente identificou as observações que estão em outro idioma, que não o inglês."},{"metadata":{"trusted":true},"cell_type":"code","source":"## ---- classification_non_english----|\n\nstart = Sys.time()\n\ngroup_by(songs_topics, document) %>% \n    arrange(desc(gamma)) %>% \n    filter(row_number() == 1) %>% \n    ungroup() %>% \n    filter(topic == 2) %>% \n    inner_join(lyrics, by = c('document' = 'index')) %>% \n    select(artist, song, genre, decade, gamma, lyrics) %>% \n    mutate(lyrics_preview = str_sub(lyrics, 1, 140)) %>% \n    select(-lyrics) %>% \n    arrange(desc(gamma)) %>% \n    head(25)\n\nend = Sys.time()\nmem = pryr::mem_used()\n\nWriteLog('finish', start, end, mem)\n\n## ---- end-of-classification_non_english----|\n","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"# Referências"},{"metadata":{},"cell_type":"markdown","source":"[Text Mining with R](https://www.tidytextmining.com/) - Julia Silge and David Robinson\n\n[Beginners Guide to LDA Topic Modelling with R](https://towardsdatascience.com/beginners-guide-to-lda-topic-modelling-with-r-e57a5a8e7a25) - [Farren tang\n](https://towardsdatascience.com/@tangqingxia)\n\n[A Beginner's Guide to Bag of Words & TF-IDF](https://pathmind.com/wiki/bagofwords-tf-idf) - Chris Nicholson"}],"metadata":{"kernelspec":{"display_name":"R","language":"R","name":"ir"},"language_info":{"mimetype":"text/x-r-source","name":"R","pygments_lexer":"r","version":"3.4.2","file_extension":".r","codemirror_mode":"r"}},"nbformat":4,"nbformat_minor":1}