{"cells":[{"metadata":{"_kg_hide-input":true,"trusted":true,"_kg_hide-output":true},"cell_type":"code","source":"# config\nset.seed(12345)\noptions(repr.plot.width = 20, repr.plot.height = 12)\noptions(encoding = 'UTF-8')\n\nlist.of.packages <- c(\"ggwordcloud\")\nnew.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,\"Package\"])]\nif(length(new.packages)) install.packages(new.packages)\n","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"# Trabalho em Grupo\n(até 4 integrantes)\n\n- **Curso:** FGV MBA - Business Analytics and Big Data\n- **Disciplina:** Análise de Mídias Sociais e Mineração de Texto\n- **Professor:** Gustavo Mirapalheta\n\n## Alunos\n|Github|Nome|Matricula|E-mail|\n|---|---|---|---|\n|<a href=\"https://github.com/DanielFCampos\"><img src=\"https://avatars2.githubusercontent.com/u/31582602?s=460&v=4\" title=\"DanielFCampos\" width=\"40\" height=\"40\"></a>|Daniel Campos|A57635769|[daniel.ferraz.campos@gmail.com](daniel.ferraz.campos@gmail.com)|\n|<a href=\"https://github.com/ldaniel\"><img src=\"https://avatars2.githubusercontent.com/u/205534?s=460&v=4\" title=\"ldaniel\" width=\"40\" height=\"40\"></a>|Leandro Daniel|A57622988|[contato@leandrodaniel.com](contato@leandrodaniel.com)|\n|<a href=\"https://github.com/RodriGonca\"><img src=\"https://avatars2.githubusercontent.com/u/50252438?s=460&v=4\" title=\"RodriGonca\" width=\"40\" height=\"40\"></a>|Rodrigo Goncalves|A57566093|[rodrigo.goncalves@me.com](rodrigo.goncalves@me.com)|\n|<a href=\"https://github.com/ygorlima1\"><img src=\"https://avatars2.githubusercontent.com/u/52429828?s=460&v=4\" title=\"ygorlima1\" width=\"40\" height=\"40\"></a>|Ygor Lima|A57549661|[ygor_redesocial@hotmail.com](ygor_redesocial@hotmail.com)|"},{"metadata":{},"cell_type":"markdown","source":"# Enunciado\n\nApresente uma análise exploratória de dados utilizando as técnicas de Text Mining desenvolvidas na disciplina Análise de Mídias Sociais e Mineração de Texto"},{"metadata":{},"cell_type":"markdown","source":"Decidimos aplicar as técnicas discutidas em sala de aula em um dataset contendo letras de músicas."},{"metadata":{},"cell_type":"markdown","source":"# Libraries"},{"metadata":{"trusted":true,"_kg_hide-input":true,"_kg_hide-output":true},"cell_type":"code","source":"\n# Data wrangling\nlibrary(dplyr, warn.conflicts = FALSE)\nlibrary(tidyr, warn.conflicts = FALSE)\nlibrary(readr)\nlibrary(stringr)\nlibrary(tidytext)\nlibrary(ggplot2)\nlibrary(forcats)\n\n# wordcloud\nlibrary(ggwordcloud)\n\n# network\nlibrary(visNetwork)\nlibrary(IRdisplay)\nlibrary(igraph, warn.conflicts = FALSE)\n","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"# Importar e efetuar a limpeza dos dados"},{"metadata":{"_uuid":"051d70d956493feee0c6d64651c6a088724dca2a","_execution_state":"idle","trusted":true,"_kg_hide-input":true},"cell_type":"code","source":"# data ingestion\nlyrics <- read_csv('../input/380000-lyrics-from-metrolyrics/lyrics.csv',\n                   col_types = cols(\n                     index = col_double(),\n                     song = col_character(),\n                     year = col_double(),\n                     artist = col_character(),\n                     genre = col_character(),\n                     lyrics = col_character()),\n                  locale = locale(encoding = 'UTF-8'))\n\n# uncomment for prototyping.\n# lyrics  <- sample_n(lyrics, size = 10000)\n# invisible(gc())\n\nprint(paste('Número de observações: ', length(lyrics$index)))\n","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"Vamos eliminar as observações sem letras, sem identificação do gênero musical e anteriores a 1970, dado que temos poucas observações anteriores a 1970."},{"metadata":{"trusted":true,"_kg_hide-input":true,"_kg_hide-output":false},"cell_type":"code","source":"# data filter\nlyrics <- filter(lyrics, \n                 !is.na(lyrics), \n                 !(genre %in% c('Not Available', 'Other')),\n                 as.integer(year) >= 1970)\n\nprint(paste('Número de observações: ', length(lyrics$index)))\n","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"Vamos incluir a identificação da década de lançamento da música para podermos avaliar alterações ao longo do tempo"},{"metadata":{"trusted":true,"_kg_hide-input":true},"cell_type":"code","source":"# data enhance\nlyrics$decade <- paste(str_sub(lyrics$year, 1, 3), '0', sep = '')\nlyrics$genre  <- trimws(lyrics$genre)\n","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"Uma amostra do dataset."},{"metadata":{"trusted":true,"_kg_hide-input":true},"cell_type":"code","source":"# view sample\nsample_n(lyrics, 3)\n","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"# Análise Exploratória dos Dados Inicial"},{"metadata":{},"cell_type":"markdown","source":"Quantidade de músicas e artistas por gênero musical."},{"metadata":{"trusted":true,"_kg_hide-input":true},"cell_type":"code","source":"# view number of observations per genre\ntemp <- group_by(lyrics, genre) %>%\n  summarise(songs = n(),\n            artists = length(unique(artist))) %>% \n  arrange(desc(songs))\n\nggplot(data = temp, aes(x = fct_reorder(genre, songs), y = songs)) +\n    geom_bar(stat = 'identity', aes(fill = genre)) +\n    geom_label(aes(label = paste('songs:', songs, '\\nartists: ', artists, sep = ''),\n                   y = 1000, fill = genre), size = 8, hjust = 'left', alpha = 0.25) +\n    coord_flip() +\n    xlab('Genre') +\n    ylab('') +\n    labs(title = 'Songs and Artists by Genre') +\n    theme(legend.position = 0,\n         text = element_text(size = 20),\n         axis.text.x = element_blank())\n","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"Quantidade de músicas e artistas por década."},{"metadata":{"trusted":true,"_kg_hide-input":true},"cell_type":"code","source":"# view number of observations per decade\ntemp  <- group_by(lyrics, decade) %>% \n            summarise(songs = n(),\n                      artists = length(unique(artist))) %>% \n            arrange(desc(decade))\n\nggplot(data = temp, aes(x = decade, y = songs)) +\n    geom_bar(stat = 'identity', aes(fill = decade)) +\n    geom_label(aes(label = paste('songs:', songs, '\\nartists: ', artists, sep = ''),\n                   y = 1000, fill = decade), size = 8, hjust = 'left', alpha = 0.25) +\n    coord_flip() +\n    xlab('Decade') +\n    ylab('') +\n    labs(title = 'Songs and Artists by Decade') +\n    theme(legend.position = 0,\n         text = element_text(size = 20),\n         axis.text.x = element_blank())\n","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"Top 3 artistas, em relação a quantidade de músicas, por gênero."},{"metadata":{"trusted":true,"_kg_hide-input":true},"cell_type":"code","source":"# view top artists\ncount(lyrics, genre, artist, sort = TRUE) %>% \n  group_by(genre) %>% \n  arrange(desc(n)) %>% \n  filter(row_number() <= 3) %>% \n  arrange(desc(genre), desc(n))\n","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"# Análise Exploratória de Dados"},{"metadata":{},"cell_type":"markdown","source":"## Análise de palavras mais comuns."},{"metadata":{},"cell_type":"markdown","source":"Vamos utilizar o pacote tidytext para tokenizar os termos em um dataframe contendo uma palavra por linha. <br>\n\nTambém vamos excluir as stop words em inglês inicialmente."},{"metadata":{"trusted":true,"_kg_hide-input":true},"cell_type":"code","source":"# tokens per word\nlyrics_token <- unnest_tokens(lyrics,\n                              input = lyrics,\n                              output = word,\n                              token = 'words',\n                              drop = TRUE,\n                              to_lower = TRUE)\n\nprint(paste('Número de observações: ', length(lyrics_token$index)))\n","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"Algumas músicas, ou mesmo parte da letra, estão em outros idiomas além do inglês. <br>\n\nPara resolver isso vamos aplicar mais dois filtros, onde eliminamos termos que não iniciam com letras {a- z} e stop words em outros idiomas de origem latina."},{"metadata":{"trusted":true,"_kg_hide-input":true},"cell_type":"code","source":"# eliminating stop words\ncustom_stop_words <- c(tm::stopwords(\"german\"), \n                       tm::stopwords(\"spanish\"), \n                       tm::stopwords(\"portuguese\"), \n                       tm::stopwords(\"french\"),\n                       stop_words$word, 'chorus', 'repeat', 'versus')\n\nlyrics_token <- filter(lyrics_token,\n                       str_detect(word, '^[a-z]') &\n                       !(word %in% custom_stop_words))\n\nbing = get_sentiments('bing')\nlyrics_token$sentiment = plyr::mapvalues(lyrics_token$word, \n                                         bing$word, bing$sentiment, \n                                         warn_missing = FALSE)\nlyrics_token$sentiment = if_else(!(lyrics_token$sentiment %in% c('positive', 'negative')), \n                                    'neutral', lyrics_token$sentiment)\n\nprint(paste('Número de observações após a eleminação das stop words: ', \n            length(lyrics_token$index)))\n\nsample_n(lyrics_token, size = 15)\nsaveRDS(lyrics_token, 'lyrics_token.rds')\n\ncount_words <- count(lyrics_token, word, sentiment, sort = TRUE)\nsaveRDS(count_words, 'count_words.rds')\n\nrm(bing, count_words)\ninvisible(gc)\n","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"De posse do dataset organizado, vamos iniciar com a contagem relativa dos termos por artista e gênero musical."},{"metadata":{"trusted":true,"_kg_hide-input":true},"cell_type":"code","source":"# contagem por gênero musical\ngw <- group_by(lyrics_token, genre, sentiment, word) %>%\n  summarise(gw_c = n()) %>% \n  ungroup() %>% \n  group_by(genre) %>%\n  mutate(gw_p = gw_c / sum(gw_c)) %>% \n  ungroup() %>%\n  arrange(genre, desc(gw_p)) %>% \n  group_by(word) %>% \n  mutate(w_c = sum(gw_c))\n\n# contagem por palavra\nw <- group_by(lyrics_token, sentiment, word) %>%\n  summarise(w_c = n()) %>% \n  ungroup() %>%\n  mutate(w_p = w_c / sum(w_c)) %>%\n  arrange(desc(w_c))\n\nrm(lyrics_token)\ninvisible(gc)\n","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"Vamos iniciar a exploração observando as 200 palavras mais comuns encontradas no dataset."},{"metadata":{"trusted":true,"_kg_hide-input":true},"cell_type":"code","source":"# view word cloud\ntemp <- group_by(w, sentiment) %>% \n    arrange(desc(w_c)) %>% \n    filter(row_number() < 101) %>% \n    mutate(angle = 90 * sample(c(0, 1), n(), replace = TRUE, prob = c(70, 30)),\n          freq_sd = (w_c - min(w_c)) / (max(w_c) - min(w_c))) %>% \n    ungroup()\n\noptions(repr.plot.width = 20, repr.plot.height = 6)\n\nplt  <- ggplot(data = temp,\n  aes(label = word, \n      size = w_c,\n      color = factor(sentiment), \n      angle = angle)) +\n  geom_text_wordcloud_area(eccentricity = 0.65) +\n  facet_wrap(vars(sentiment), nrow = 1) +\n  scale_size_area(max_size = 35) +\n  theme_minimal() +\n  theme(text = element_text(size = 20))\n\nsuppressWarnings(print(plt))\n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_kg_hide-input":true},"cell_type":"code","source":"# view word cloud per genre\ntemp <- group_by(gw, genre, sentiment) %>%  \n    arrange(desc(gw_p)) %>% \n    filter(row_number() < 51) %>%\n    mutate(angle = 90 * sample(c(0, 1), n(), replace = TRUE, prob = c(70, 30)), \n           freq_sd = (gw_c - min(gw_c)) / (max(gw_c) - min(gw_c))) %>% \n    ungroup()\n\noptions(repr.plot.width = 20, repr.plot.height = 48)\n\nplt <- ggplot(data = temp,\n  aes(label = word, \n      size = freq_sd,\n      color = factor(sample.int(20, nrow(temp), replace = TRUE)), \n      angle = angle)) +\n  geom_text_wordcloud_area() +\n  scale_size_area(max_size = 25) +\n  facet_wrap(genre ~ sentiment, nrow = 10) +\n  theme(text = element_text(size = 15))\n\nsuppressWarnings(print(plt))\n","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"Na sequência vamos verificar se as 10 palavras mais comuns são uniformes entre os gêneros musicais presentes no dataset."},{"metadata":{"trusted":true,"_kg_hide-input":true},"cell_type":"code","source":"# view most common words\noptions(repr.plot.width = 20, repr.plot.height = 12)\n\ngw %>%\n  group_by(genre) %>% \n  arrange(desc(gw_p)) %>% \n  filter(row_number() <= 10) %>%\n  mutate(rank = row_number()) %>% \n  ggplot() +\n  geom_bar(stat = 'identity',\n           aes(y = gw_p, x = fct_reorder(word, w_c), fill = genre)) +\n  geom_text(aes(label = as.character(rank), x = fct_reorder(word, w_c), y = 0.002)) +\n  facet_wrap(vars(genre), nrow = 1) +\n  coord_flip() +\n  xlab('Word') +\n  ylab('Relative frequency') +\n  labs(title = 'Top 10 words by music genre') +\n  theme(legend.position = 0,\n        axis.text.x = element_blank(),\n        axis.ticks.x = element_blank(),\n        text = element_text(size = 20))\n","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"Como podemos observar pelo gráfico acima em geral as top 10 palavras são as mesmas entre os gêneros, porém, os gêneros Metal e Hip-Hop se destacam com diferentes temas em relação aos demais gêneros. <br>\n\nTambém observamos que Country, Folk e Indie abordam com maior frequência o tema Home. <br>"},{"metadata":{},"cell_type":"markdown","source":"## Análise de Ngramas"},{"metadata":{},"cell_type":"markdown","source":"Além da análise das palavras mais comuns podemos explorar quais são os Bigramas e Trigramas mais comuns utilizados."},{"metadata":{},"cell_type":"markdown","source":"### Bigramas"},{"metadata":{"trusted":true,"_kg_hide-input":true},"cell_type":"code","source":"# tokens bigramas\nlyrics_token_bi <- unnest_tokens(lyrics,\n                                 input = lyrics,\n                                 output = term,\n                                 token = 'ngrams',\n                                 drop = TRUE,\n                                 to_lower = TRUE,\n                                 n = 2)\n\nprint(paste('Número de termos: ', length(lyrics_token_bi$index)))\n","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"Agora separamos o bigrama em duas palavras para eliminarmos os bigramas que contem stop words assim como fizemos com o a análise de palavras individuais. <br>\n\nIremos eliminar as linhas onde ao menos uma das palavras do bigrama são stop words."},{"metadata":{"_kg_hide-input":true,"trusted":true,"_kg_hide-output":true},"cell_type":"code","source":"rm(lyrics)\ninvisible(gc())","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_kg_hide-input":true},"cell_type":"code","source":"# clean bigrams\nlyrics_token_bi <- separate(lyrics_token_bi, term, sep = ' ', into = c('w1', 'w2'), remove = FALSE)\nlyrics_token_bi <- filter(lyrics_token_bi, !(w1 %in% custom_stop_words) & str_detect(w1, '^[a-z]'))\nlyrics_token_bi <- filter(lyrics_token_bi, !(w2 %in% custom_stop_words) & str_detect(w2, '^[a-z]'))\ninvisible(gc())\nlyrics_token_bi <- filter(lyrics_token_bi, w1 != w2)\nsaveRDS(lyrics_token_bi, 'lyrics_token_bi.rds')\n\nprint(paste('Número de termos apos eliminação de stop words: ', length(lyrics_token_bi$index)))\n","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"Vamos criar uma função para gerar um diagrama de rede com os 5 bigramas mais comuns para cada palavras selecionadas."},{"metadata":{"trusted":true},"cell_type":"code","source":"# custom function to plot network diagram\nplot_network <- function(temp, output) {\n    temp <- group_by(temp, w1, w2) %>% \n               summarise(count = n()) %>%\n               ungroup() %>%\n               mutate(percent = count / sum(count)) %>%\n               group_by(w1) %>%\n               arrange(desc(count)) %>%\n               filter(row_number() <= 5) %>% \n               ungroup() %>% \n               filter(w1 %in% top_words$word)\n\n    nodes = tibble(label = unique(c(temp$w1, temp$w2)))\n    nodes = tibble::rowid_to_column(nodes, \"id\")\n    nodes$value = plyr::mapvalues(nodes$label, count_words$word, count_words$n, warn_missing = FALSE)\n    nodes$value = as.numeric(nodes$value)\n    nodes$value = (nodes$value - min(nodes$value)) / (max(nodes$value) - min(nodes$value))\n    nodes$value = nodes$value * 100\n    nodes$group = plyr::mapvalues(nodes$label, count_words$word, count_words$sentiment, warn_missing = FALSE)\n\n    edges  <- tibble(from = temp$w1,\n                     to = temp$w2,\n                     weight = temp$percent)\n\n    edges$from = plyr::mapvalues(edges$from, nodes$label, nodes$id, warn_missing = FALSE)\n    edges$to = plyr::mapvalues(edges$to, nodes$label, nodes$id, warn_missing = FALSE)\n\n    net_graph <- visNetwork(nodes, edges, height = \"500px\", width = \"100%\") %>% \n                     visNodes(scaling = list(min = 10, max = 50)) %>% \n                     visEdges(arrows = \"to\") %>% \n                     visOptions(highlightNearest = TRUE, \n                                nodesIdSelection = TRUE,\n                                selectedBy = \"group\") %>%\n                     visGroups(groupname = \"positive\", color = \"green\")  %>% \n                     visGroups(groupname = \"neutral\") %>% \n                     visGroups(groupname = \"negative\", color = \"red\") %>% \n                     visLegend(width = 0.1)\n\n    return (net_graph)\n}\n","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"Aqui estamos vendo os 5 bigramas mais comuns para as 25 palavras mais usadas em todo o data set."},{"metadata":{"trusted":true,"_kg_hide-input":true},"cell_type":"code","source":"# bigrams graph for all dataset\ncount_words <- readRDS('count_words.rds')\n\ntop_words <- count_words %>% \n                filter(row_number() <= 25)\n\nnet_graph <- plot_network(lyrics_token_bi)\nhtmlwidgets::saveWidget(net_graph, \"net_graph.html\")\n\ndisplay_html('<iframe src=\"net_graph.html\" width=100% height=600></iframe>')\n","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"Agora podemos aplicar um filtro no dataset original e verificar a rede de bigramas de um artista em aprticular como Bob Dylan.\n\nAqui estamos vendo os 5 bigramas mais comuns para as 200 palavras mais usadas pelo artista."},{"metadata":{"trusted":true},"cell_type":"code","source":"# bigrams graph for one artist\n\nartist_filter = 'bob-dylan'\n\ncount_words  <- readRDS('lyrics_token.rds')\ncount_words  <- filter(count_words, artist == artist_filter)\ncount_words  <- count(count_words, word, sentiment, sort = TRUE)\n\ntop_words <- count_words %>% \n                filter(row_number() <= 50)\n\ntemp  <- filter(lyrics_token_bi, artist == artist_filter)\n\nnet_graph <- plot_network(temp)\nhtmlwidgets::saveWidget(net_graph, \"net_graph_artist.html\")\n\ndisplay_html('<iframe src=\"net_graph_artist.html\" width=100% height=600></iframe>')\n","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"Podemos fazer o mesmo filtro para um gênero específico como Metal e Rock."},{"metadata":{"trusted":true},"cell_type":"code","source":"# bigrams graph for one genre\n\ngenre_filter = 'Metal'\n\ncount_words  <- readRDS('lyrics_token.rds')\ncount_words  <- filter(count_words, genre == genre_filter)\ncount_words  <- count(count_words, word, sentiment, sort = TRUE)\n\ntop_words <- count_words %>% \n                filter(row_number() <= 25)\n\ntemp  <- filter(lyrics_token_bi, genre == genre_filter)\n\nnet_graph <- plot_network(temp)\nhtmlwidgets::saveWidget(net_graph, \"net_graph_genre.html\")\n\ndisplay_html('<iframe src=\"net_graph_genre.html\" width=100% height=600></iframe>')\n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"# bigrams graph for one genre\n\ngenre_filter = 'Rock'\n\ncount_words  <- readRDS('lyrics_token.rds')\ncount_words  <- filter(count_words, genre == genre_filter)\ncount_words  <- count(count_words, word, sentiment, sort = TRUE)\n\ntop_words <- count_words %>% \n                filter(row_number() <= 25)\n\ntemp  <- filter(lyrics_token_bi, genre == genre_filter)\n\nnet_graph <- plot_network(temp)\nhtmlwidgets::saveWidget(net_graph, \"net_graph_genre_2.html\")\n\ndisplay_html('<iframe src=\"net_graph_genre_2.html\" width=100% height=600></iframe>')\n","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"A exemplo do que fizemos com a contagem individual de palavras vamos verificar quais os bigramas mais utilizados por gênero musical."},{"metadata":{"trusted":true,"_kg_hide-input":true},"cell_type":"code","source":"# contagem por gênero musical\ngw <- group_by(lyrics_token_bi, genre, term) %>%\n  summarise(gw_c = n()) %>% \n  ungroup() %>% \n  group_by(genre) %>%\n  mutate(gw_p = gw_c / sum(gw_c)) %>% \n  ungroup() %>%\n  arrange(genre, desc(gw_p)) %>% \n  group_by(term) %>% \n  mutate(w_c = sum(gw_c))\n\n# contagem por palavra\nw <- group_by(lyrics_token_bi, term) %>%\n  summarise(w_c = n()) %>% \n  ungroup() %>%\n  mutate(w_p = w_c / sum(w_c)) %>%\n  arrange(desc(w_c))\n","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"Vamos verificar a nuvem de termos de bigramas."},{"metadata":{"trusted":true,"_kg_hide-input":true},"cell_type":"code","source":"# wordcloud commom bigrams\ntemp <- arrange(w, desc(w_c)) %>% \n    filter(row_number() < 101) %>% \n    mutate(angle = 90 * sample(c(0, 1), n(), replace = TRUE, prob = c(70, 30)))\n\nplt <- ggplot(data = temp,\n  aes(label = term, \n      size = w_c,\n      color = factor(sample.int(20, nrow(temp), replace = TRUE)), \n      angle = angle)) +\n  geom_text_wordcloud_area(eccentricity = 1.1) +\n  scale_size_area(max_size = 25) +\n  theme_minimal()\n\nsuppressWarnings(print(plt))\n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_kg_hide-input":true},"cell_type":"code","source":"# word cloud commom bigrams per genre\ntemp <- group_by(gw, genre) %>%  \n    arrange(desc(gw_p)) %>% \n    filter(row_number() < 26) %>%\n    mutate(angle = 90 * sample(c(0, 1), n(), replace = TRUE, prob = c(100, 0)), \n           freq_sd = (gw_c - min(gw_c)) / (max(gw_c) - min(gw_c))) %>% \n    ungroup()\n\noptions(repr.plot.width = 20, repr.plot.height = 24)\n\nplt <- ggplot(data = temp,\n  aes(label = term, \n      size = freq_sd,\n      color = factor(sample.int(20, nrow(temp), replace = TRUE)), \n      angle = angle)) +\n  geom_text_wordcloud_area() +\n  scale_size_area(max_size = 20) +\n  facet_wrap(vars(genre), nrow = 5)\n\nsuppressWarnings(print(plt))\n","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"Agora verificamos os top 5 bigramas por gênero musical."},{"metadata":{"trusted":true,"_kg_hide-input":true},"cell_type":"code","source":"# most commom bigrams per genre\noptions(repr.plot.width = 20, repr.plot.height = 12)\n\ngw %>%\n  group_by(genre) %>% \n  arrange(desc(gw_p)) %>% \n  filter(row_number() <= 5) %>%\n  mutate(rank = row_number()) %>% \n  ggplot() +\n  geom_bar(stat = 'identity',\n           aes(y = gw_p, x = fct_reorder(term, w_c), fill = genre)) +\n  geom_text(aes(label = as.character(rank), x = fct_reorder(term, w_c), y = 0.0002)) +\n  facet_wrap(vars(genre), nrow = 1) +\n  coord_flip() +\n  xlab('Term') +\n  ylab('Relative frequency') +\n  labs(title = 'Top 5 bigrams by music genre') +\n  theme(legend.position = 0,\n        axis.text.x = element_blank(),\n        axis.ticks.x = element_blank())\n","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"R","language":"R","name":"ir"},"language_info":{"mimetype":"text/x-r-source","name":"R","pygments_lexer":"r","version":"3.4.2","file_extension":".r","codemirror_mode":"r"}},"nbformat":4,"nbformat_minor":1}